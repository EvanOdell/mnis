roxygen2::roxygenise()
Date <- Sys.Date()
Date
class(Date)
mnis_LordsType <- function(Date = NULL) {
if(is.null(Date)==TRUE) {
Date <- Sys.Date()
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/LordsByType/"
query <- paste0(baseurl, Date, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got$LordsByType)
names(x) <- sub("Party.", "", names(x))
names(x) <- sub(".Id", "Id", names(x))
x
}
x <- mnis_LordsType()
x
rm(list=ls())
roxygen2::roxygenise()
x <- mnis_PartyState()
x
library(mnis)
x <- mnis_PartyState()
library(mnis)
x <- mnis_PartyState()
x
x
library(mnis)
rm(x)
library(mnis)
mnis_Parties(172)
mnis_Parties(172)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(mnis)
ref_Titles()
mnis::ref_Cabinets()
roxygen2::roxygenise()
formatR::tidy_dir("R")
roxygen2::roxygenise()
library(mnis)
devtools::use_build_ignore("NEWS.md")
devtools::use_build_ignore("NEWS.md")
devtools::use_build_ignore("cran-comments.Rmd")
devtools::use_build_ignore("cran-comments.md")
roxygen2::roxygenise()
devtools::build_win()
devtools::release()
devtools::release()
devtools::release()
citation("mnis")
library(mnis)
citation("mnis")
install.packages(c("git2r", "shinyjs"))
library(dplyr)
??dplyr
mnis_GeneralElectionResults <- function(locationType = "Country", locationName = "Great Britain", startDate = "1900-01-01", endDate = Sys.Date()) {
.Deprecated("mnis_GeneralElectionResults", package = mnis)
mnis_general_election_results(locationType = locationType, locationName = locationName, startDate = startDate, endDate = endDate)
}
x <- mnis_GeneralElectionResults()
help("dplyr-defunct")
??dplyr-defunct
help("dplyr-deprecated")
roxygen2::roxygenise()
x <- mnis_GeneralElectionResults(locationType = 'Country', locationName = 'England',
#'                                  startDate = '2010-01-01', endDate = '2016-01-01')
)
x <- mnis_GeneralElectionResults(locationType = 'Country', locationName = 'England',startDate = '2010-01-01', endDate = '2016-01-01')
mnis_GeneralElectionResults <- function(locationType = "Country", locationName = "Great Britain", startDate = "1900-01-01", endDate = Sys.Date()) {
.Deprecated("mnis_general_election_results")
mnis_general_election_results(locationType = locationType, locationName = locationName, startDate = startDate, endDate = endDate)
}
x <- mnis_GeneralElectionResults(locationType = 'Country', locationName = 'England',startDate = '2010-01-01', endDate = '2016-01-01')
formatR::tidy_dir("R")
roxygen2::roxygenise()
test <- mnis_Parties
library(mnis)
test <- mnis_Parties
test <- mnis_Parties()
library(dplyr)
x <- rbind_all()
x <- rbind_all(x)
x <- rbind_all(1)
list=list()
x <- rbind_all(list)
mnis_PreferredNames <- function(ID = NULL, mem_id = TRUE, refDods = FALSE) {
.Deprecated("mnis_preferred_names")
mnis_preferred_names_(ID = ID, mem_id = mem_id, refDods = refDods)
}
x <- mnis_PreferredNames()
mnis_PreferredNames <- function(ID = NULL, mem_id = TRUE, refDods = FALSE) {
.Deprecated("mnis_preferred_names")
mnis_preferred_names(ID = ID, mem_id = mem_id, refDods = refDods)
}
x <- mnis_PreferredNames()
x <- mnis_PreferredNames(172)
formatR::tidy_dir("R")
roxygen2::roxygenise()
x <- mnis_BiographyEntries()
library(mnis)
x <- mnis_BiographyEntries()
x <- mnis_BiographyEntries(172)
library(mnis)
library(mnis)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(mnis)
rm(list-ls())
rm(list=ls())
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(syuzhet)
poa_word_v <- get_text_as_string("random.txt")
poa_word_v <- get_text_as_string("random.txt")
x <- get_sentiment(poa_word_v, method="bing")
x
t <- get_sentences(poa_word_v)
x <- get_sentiment(t, method="bing")
x
summary(x)
mean(x)
poa_word_v <- get_text_as_string("random.txt")
t <- get_sentences(poa_word_v)
x <- get_sentiment(t, method="bing")
x
mean(x)
median(x)
rm(list=ls())
library(mnis)
x <- mnis_basic_details(172)
x
print(x)
head(x)
View(x)
y <- mnis_basic_details(172)
names(y)
names(x)
mnis_basic_details <- function(ID = NULL, mem_id = TRUE, refDods = FALSE) {
if (is.null(ID) == TRUE) {
stop("ID cannot be empty", call. = FALSE)
}
ID <- as.character(ID)
if (refDods == TRUE) {
ID_Type <- "refDods="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/BasicDetails")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
x <- t(dl)
x <- as.data.frame(x)
x <- x[rownames(x) != "ID", ]
x
names(x) <- gsub("@", "", names(x))
names(x) <- gsub("#", "", names(x))
names(x) <- gsub("Members.Member.", "", names(x))
names(x) <- gsub(".xsi:nil", "", names(x))
x
}
y <- mnis_basic_details(172)
names(y)
mnis_basic_details <- function(ID = NULL, mem_id = TRUE, refDods = FALSE) {
if (is.null(ID) == TRUE) {
stop("ID cannot be empty", call. = FALSE)
}
ID <- as.character(ID)
if (refDods == TRUE) {
ID_Type <- "refDods="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/BasicDetails")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
x <- t(dl)
x <- as.data.frame(x)
x <- x[rownames(x) != "ID", ]
x
names(x) <- gsub("@", "", names(x))
names(x) <- gsub("#", "", names(x))
names(x) <- gsub("Members.Member.", "", names(x))
names(x) <- gsub(".xsi:nil", "", names(x))
names(x) <- gsub(".xmlns:xsi", "", names(x))
names(x) <- gsub("BasicDetails.", "", names(x))
x
}
y <- mnis_basic_details(172)
names(y)
y <- mnis_biography_entries(172)
y
names(y)
library(mnis)
y <- mnis_biography_entries(172)
y
names(y)
library(mnis)
library(mnis)
x <- mnis_opposition_posts(172)
x
names(x)
x <- mnis_staff(172)
x
names(x)
x <- mnis_house_memberships(172)
x
names(x)
x <- mnis_committees(172)
x
names(x)
x <- mnis_addresses(172)
names(x)
x <- mnis_constituencies(172)
x
names(x)
library(mnis)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(mnis)
roxygen2::roxygenise()
library(mnis)
x <- mnis_elections_contested(172)
names(x)
x <- mnis_statuses(172)
names(x)
x <- mnis_interests(172)
names(x)
x <- mnis_known_as(172)
names(x)
x <- mnis_maiden_speeches(172)
names(x)
x <- mnis_parliamentary_posts(172)
names(x)
x <- mnis_parliamentary_posts(100)
x
x <- mnis_parliamentary_posts(72)
x
x <- mnis_parliamentary_posts(500)
x
x <- mnis_parliamentary_posts(432)
x
x <- mnis_parties(172)
x
names(x)
x <-mnis_preferred_names(172)
x
names(x)
roxygen2::roxygenise()
roxygen2::roxygenise()
x <- mnis_committees(172)
x
names(x)
x <- mnis_biography_entries(172)
x
names(x)
x <- mnis_biography_entries(172, tidy=FALSE)
x
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(mnis)
??roxygen2
x <- mnis_basic_details(172, tidy=FALSE)
x
mnis_basic_details <- function(ID = NULL, mem_id = TRUE, refDods = FALSE, tidy = TRUE) {
if (is.null(ID) == TRUE) {
stop("ID cannot be empty", call. = FALSE)
}
ID <- as.character(ID)
if (refDods == TRUE) {
ID_Type <- "refDods="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/BasicDetails")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
x <- t(dl)
x <- as.data.frame(x)
x <- x[rownames(x) != "ID", ]
if(tidy==TRUE){
names(x) <- gsub("@", "", names(x))
names(x) <- gsub("#", "", names(x))
names(x) <- gsub("Members.Member.", "", names(x))
names(x) <- gsub(".xsi:nil", "", names(x))
names(x) <- gsub(".xmlns:xsi", "", names(x))
names(x) <- gsub("BasicDetails.", "", names(x))
x
} else {
x
}
}
x <- mnis_basic_details(172, tidy=FALSE)
x
library(mnis)
x <- mnis_basic_details(172, tidy=TRUE)
x
library(mnis)
rm(list=ls())
install.packages("hmisc")
install.packages("Hmisc")
library(Hmisc)
library(mnis)
x <- mnis_all_members()
mnis_all_members <- function(house = "all", party = NULL, joined_since = NULL, tidy = TRUE) {
if (is.na(pmatch(house, c("all", "lords", "commons"))))
stop("Please select one of 'all', 'lords' or 'commons' for the parameter 'house'")
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/Membership=all"
if (is.null(party) == FALSE)
party <- utils::URLencode(party)
if (house == "lords") {
house <- "|house=lords"
} else if (house == "commons") {
house <- "|house=commons"
} else if (house == "all") {
house <- ""
}
if (is.null(party) == FALSE) {
party <- paste0("|party*", party)
}
if(is.null(joined_since) == FALSE){
joined_since <- paste0("joinedsince=", joined_since)
}
query <- paste0(baseurl, house, party, joined_since)
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got)
if (tidy == TRUE) {
x <- mnis_tidy(x)
} else {
x
}
}
x <- mnis_all_members()
library(mnis)
x
mnis_all_members <- function(house = "all", party = NULL, joined_since = NULL, tidy = TRUE) {
if (is.na(pmatch(house, c("all", "lords", "commons"))))
stop("Please select one of 'all', 'lords' or 'commons' for the parameter 'house'")
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/Membership=all"
if (is.null(party) == FALSE)
party <- utils::URLencode(party)
if (house == "lords") {
house <- "|house=lords"
} else if (house == "commons") {
house <- "|house=commons"
} else if (house == "all") {
house <- ""
}
if (is.null(party) == FALSE) {
party <- paste0("|party*", party)
}
if(is.null(joined_since) == FALSE){
joined_since <- paste0("joinedsince=", joined_since)
}
message("Connecting to API")
query <- paste0(baseurl, house, party, joined_since)
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got)
if (tidy == TRUE) {
x <- mnis_tidy(x)
} else {
x
}
}
x <- mnis_all_members()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(mnis)
x <- mnis_all_members()
mnis_tidy <- function(x) {
names(x) <- gsub("@", "", names(x))
names(x) <- gsub("#", "", names(x))
names(x) <- gsub("\\.\\.", "\\.", names(x))
names(x) <- gsub("^Members\\.Member\\.", "", names(x))
names(x) <- gsub("^BasicDetails\\.", "", names(x))
names(x) <- gsub("^BiographyEntries\\.", "", names(x))
names(x) <- gsub("^Committees\\.", "", names(x))
names(x) <- gsub("^Addresses\\.", "", names(x))
names(x) <- gsub("^Constituencies\\.", "", names(x))
names(x) <- gsub("^ElectionsContested\\.", "", names(x))
names(x) <- gsub("^Experiences\\.", "", names(x))
names(x) <- gsub("^GovernmentPosts\\.", "", names(x))
names(x) <- gsub("^Honours\\.", "", names(x))
names(x) <- gsub("^HouseMemberships\\.", "", names(x))
names(x) <- gsub("^Statuses\\.", "", names(x))
names(x) <- gsub("^Staff\\.", "", names(x))
names(x) <- gsub("^Interests\\.Category\\.Interest\\.", "Interest\\.", names(x))
names(x) <- gsub("^Interests\\.Category\\.", "Interest\\.", names(x))
names(x) <- gsub("^MaidenSpeeches\\.", "", names(x))
names(x) <- gsub("^OppositionPosts\\.", "", names(x))
names(x) <- gsub("^Parties\\.", "", names(x))
names(x) <- gsub("^PreferredNames\\.", "", names(x))
names(x) <- gsub("^ParliamentaryPosts\\.", "", names(x))
names(x) <- gsub("^OtherParliaments\\.", "", names(x))
names(x) <- gsub("^ParliamentaryPosts\\.", "", names(x))
names(x) <- gsub("^Post.PostHolders.PostHolder.Member", "PostHolder", names(x))
names(x) <- gsub("^Post\\.PostHolders\\.", "", names(x))
# names(x) <- gsub('^(.+?)\\.', '', names(x))
names(x) <- gsub("xsi:nil", "nil", names(x))
names(x) <- gsub("xmlns:xsi", "label", names(x))
names(x) <- gsub("xsi.nil", "nil", names(x))
names(x) <- gsub("xmlns.xsi", "label", names(x))
names(x) <- gsub("\\.", "_", names(x))
names(x) <- gsub("([[:lower:]])([[:upper:]])", "\\1_\\2", names(x))
names(x) <- tolower(names(x))
x
}
library(mnis)
library(mnis)
x <- mnis_all_members()
x
names(x)
rm(list=ls())
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_win()
library(mnis)
library(mnis)
x <- ref_Committees()
rm(x)
library(mnis)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::submit_cran()
install.packages(c("nlme", "roxygen2"))
library(mnis)
x <- mnix_basic_details
x <- mnis_basic_details()
x <- mnis_basic_details(172)
head(x)
mnis_basic_details(172, tidy=FALSE)
x <- mnis_general_election_results(locationType = 'Country', locationName = 'England',
#'                                  startDate = '2010-01-01', endDate = '2016-01-01')
startDate = '2010-01-01', endDate = '2016-01-01')
x
names(x)
library(mnis)
x <- mnis_general_election_results(locationType = 'Country', locationName = 'England',
startDate = '2010-01-01', endDate = '2016-01-01')
library(mnis)
x <- mnis_general_election_results(locationType = 'Country', locationName = 'England',
startDate = '2010-01-01', endDate = '2016-01-01')
library(mnis)
x <- mnis_general_election_results(locationType = 'Country', locationName = 'England',
startDate = '2010-01-01', endDate = '2016-01-01')
library(mnis)
library(mnis)
x <- mnis_general_election_results(locationType = 'Country', locationName = 'England',
startDate = '2010-01-01', endDate = '2016-01-01')
x
x$LocationInfo <- mnis_tidy(x$LocationInfo)
x
x <- mnis_party_state()
x
x <- mnis_party_state(tidy=FALSE)
x
x <- mnis_tidy(x)
x
roxygen2::roxygenise()
library(mnis)
devtools::use_testthat()
library(testthat)
xbdnu <- mnis_basic_details()
expect_error(xdbnu)
expect_error(xdbnu)
expect_error(xdbnu)
xbdnu <- mnis_basic_details(172)
expect_error(xdbnu)
expect_length(xbdnu, 33)
expect_length(xbdnu, 32)
expect_type(xbdnu, "list")
expect_is(xbdnu, "data.frame")
rm(list=ls())
roxygen2::roxygenise()
library(mnis)
??:::
?`:::`
stats:::coef.default
library(mnis)
