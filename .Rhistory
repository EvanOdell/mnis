x <- structure(
list(
content = parsed$Members$Member,
path = ID,
response = got
),
class = "data.frame"
)
x <- as.data.frame(x)
x
x <- structure(
list(
content = parsed$Members$Member,
path = ID,
response = got
),
class = "data.frame"
)
x
print.github_api <- function(x, ...) {
cat("<GitHub ", x$path, ">\n", sep = "")
str(x$content)
invisible(x)
}
print.github_api(x
)
print.github_api(x
)
x<-print.github_api(x)
x
mnis_base <- function(request) {
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
parsed <- jsonlite::fromJSON(paste0(baseurl,request),flatten = TRUE)
x <- as.data.frame(parsed$Members)
}
x <- mnis_base('House=Commons|IsEligible=true/')
View(x)
mnis_Interests <- function(ID) {
ID <- as.character(ID)
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=ID,query = "Interests")
#query <- paste0(baseurl, ID,"/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
#got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(content(got, "text"), simplifyVector = FALSE)
x <- as.data.frame(parsed$Members)
}
x <- mnis_Interests(172)
View(x)
parsed <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
parsed
x <- as.data.frame(parsed$Members)
do.call(rbind, parsed$Members)
x <- do.call(rbind, parsed$Members)
x
class(x)
x <- as.data.frame(x)
x
View(x)
mnis_base <- function(request) {
#baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
#parsed <- jsonlite::fromJSON(paste0(baseurl,request),flatten = TRUE)
#x <- as.data.frame(parsed$Members)
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=request)
#query <- paste0(baseurl, ID,"/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
#got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
x<-as.data.frame(parsed$Members)
#x <- do.call(rbind, parsed$Members)
#x <- as.data.frame(x)
}
x <- mnis_base('House=Commons|IsEligible=true/')
rm(list=ls())
mnis_base <- function(request) {
#baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
#parsed <- jsonlite::fromJSON(paste0(baseurl,request),flatten = TRUE)
#x <- as.data.frame(parsed$Members)
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=request)
#query <- paste0(baseurl, ID,"/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
#got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
x<-as.data.frame(parsed$Members)
#x <- do.call(rbind, parsed$Members)
#x <- as.data.frame(x)
}
x <- mnis_base('House=Commons|IsEligible=true/')
mnis_base <- function(request) {
#baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
#parsed <- jsonlite::fromJSON(paste0(baseurl,request),flatten = TRUE)
#x <- as.data.frame(parsed$Members)
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=request)
#query <- paste0(baseurl, ID,"/Interests")
got <- httr::GET(baseurl, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
#got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
x<-as.data.frame(parsed$Members)
#x <- do.call(rbind, parsed$Members)
#x <- as.data.frame(x)
}
x <- mnis_base('House=Commons|IsEligible=true/')
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=request)
request<-'House=Commons|IsEligible=true/'
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=request)
got <- httr::GET(baseurl, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- httr::GET(baseurl, httr::accept_json())
http_type(got)
got <- httr::GET(query, httr::accept_json())
got <- httr::GET(baseurl, httr::accept_json())
http_type(got)
got <- httr::GET(baseurl, accept_json())
http_type(got)
got <- httr::GET(baseurl, add_headers("application/json"))
http_type(got)
got <- httr::GET(baseurl, add_headers(Accept="application/json"))
http_type(got)
got <- httr::GET(baseurl, add_headers(content_type="application/json"))
http_type(got)
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=ID,query = "Interests")
ID=172
ID <- as.character(ID)
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=ID,query = "Interests")
got <- httr::GET(baseurl, add_headers(content_type="application/json"))
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
parsed <- jsonlite::fromJSON(got, simplifyVector = FALSE)
parsed <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
got <- httr::GET(baseurl, add_headers(content_type="application/json"))
got <- httr::GET(baseurl, accept_json(add_headers()))
got <- httr::GET(baseurl, accept_json(add_headers("")))
got <- httr::GET(baseurl, accept_json())
??httr_options
httr_options(matches)
httr_options(got)
httr_options(baseurl)
HEAD(baseurl)
ID<-as.character(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "/BasicDetails")
query
got <- httr::GET(query, httr::accept_json())
http_type(got)
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- httr::content(got, as = "text")
class(got)
http_type(got)
got <- httr::content(got)
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- httr::content(got)
got
x<-as.data.frame(got)
x<-do.call(rbind, got)
x
View(x)
x<-do.call(cbind, got)
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- httr::content(got)
x<-do.call(cbind, got)
x
x<-do.call(cbind, got$Members)
x<-do.call(cbind, got$Members$Member)
x<-do.call(rbind, got$Members$Member)
x<-do.call(rbind, got$Members)
View(x)
got$Members
mnis_base <- function(request) {
#baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
#parsed <- jsonlite::fromJSON(paste0(baseurl,request),flatten = TRUE)
#x <- as.data.frame(parsed$Members)
request<-'House=Commons|IsEligible=true/'
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=request)
#query <- paste0(baseurl, ID,"/Interests")
got <- httr::GET(baseurl, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
#got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
x<-as.data.frame(parsed$Members)
#x <- do.call(rbind, parsed$Members)
#x <- as.data.frame(x)
}
x <- mnis_base('House=Commons|IsEligible=true/')
mnis_base <- function(request) {
#baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
#parsed <- jsonlite::fromJSON(paste0(baseurl,request),flatten = TRUE)
#x <- as.data.frame(parsed$Members)
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=ID,query = "Interests")
query <- paste0(baseurl, request)
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- httr::content(got)
x<-do.call(rbind, got$Members)
}
mnis_base <- function(request) {
#baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
#parsed <- jsonlite::fromJSON(paste0(baseurl,request),flatten = TRUE)
#x <- as.data.frame(parsed$Members)
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=ID,query = "Interests")
query <- paste0(baseurl, request)
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- httr::content(got)
x<-do.call(rbind, got$Members)
}
x <- mnis_base('House=Commons|IsEligible=true/')
rm(list=ls())
mnis_base <- function(request) {
#baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
#parsed <- jsonlite::fromJSON(paste0(baseurl,request),flatten = TRUE)
#x <- as.data.frame(parsed$Members)
baseurl <- modify_url("http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=",path=ID,query = "Interests")
query <- paste0(baseurl, request)
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- httr::content(got)
x<-do.call(rbind, got$Members)
}
x <- mnis_base('House=Commons|IsEligible=true/')
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
mnis_Interests <- function(ID=NULL) {
ID <- as.character(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- httr::content(got)
x<-do.call(rbind, got$Members)
}
x <- mnis_Interests(172)
x
mnis_base <- function(request) {
#baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
#parsed <- jsonlite::fromJSON(paste0(baseurl,request),flatten = TRUE)
#x <- as.data.frame(parsed$Members)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, request)
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- httr::content(got)
x<-do.call(rbind, got$Members)
}
x <- mnis_base('House=Commons|IsEligible=true/')
View(x)
View(x)
got <- httr::content(got)
got <- httr::GET(query, httr::accept_json())
query <- paste0(baseurl, ID, "/Interests")
ID=172
ID <- as.character(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- httr::content(got)
got <- jsonlite::fromJSON(httr::content(got), simplifyVector = FALSE)
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got), simplifyVector = FALSE)
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
x<-do.call(rbind, got$Members)
x<-do.call(rbind, got$Members$Member)
x<-do.call(cbind, got$Members$Member)
x<-do.call(cbind, got$Members)
View(x)
x <- as.data.frame(x)
View(x)
x<-do.call(rbind, got$Members)
x <- as.data.frame(x)
x rbindlist(x, fill=TRUE)
x <-rbindlist(x, fill=TRUE)
x <- data.table::rbindlist(x, fill=TRUE)
x <- data.table::rbindlist(got$Members, fill=TRUE)
x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
x<-do.call(rbind, got$Members)
x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
dfs <- lapply(got$Members, data.frame, stringsAsFactors = FALSE)
y <-rbind_all(dfs)
y <-dpltr::rbind_all(dfs)
y <-dplyr::rbind_all(dfs)
y <-dplyr::bind_rows(dfs)
dfs <- lapply(got$Members, data.frame, stringsAsFactors = FALSE)
dfs <- lapply(got$Members$Member, data.frame, stringsAsFactors = FALSE)
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
dfs <- lapply(got$Members$Member, data.frame, stringsAsFactors = FALSE)
tl <- function(e) { if (is.null(e)) return(NULL); ret <- typeof(e); if (ret == 'list' && !is.null(names(e))) ret <- list(type='namedlist') else ret <- list(type=ret,len=length(e)); ret; };
mkcsv <- function(v) paste0(collapse=',',v);
keyListToStr <- function(keyList) paste0(collapse='','/',sapply(keyList,function(key) if (is.null(key)) '*' else paste0(collapse=',',key)));
extractLevelColumns <- function(
nodes, ## current level node selection
..., ## additional arguments to data.frame()
keyList=list(), ## current key path under main list
sep=NULL, ## optional string separator on which to join multi-element vectors; if NULL, will leave as separate columns
mkname=function(keyList,maxLen) paste0(collapse='.',if (is.null(sep) && maxLen == 1L) keyList[-length(keyList)] else keyList) ## name builder from current keyList and character vector max length across node level; default to dot-separated keys, and remove last index component for scalars
) {
cat(sprintf('extractLevelColumns(): %s\n',keyListToStr(keyList)));
if (length(nodes) == 0L) return(list()); ## handle corner case of empty main list
tlList <- lapply(nodes,tl);
typeList <- do.call(c,lapply(tlList,`[[`,'type'));
if (length(unique(typeList)) != 1L) stop(sprintf('error: inconsistent types (%s) at %s.',mkcsv(typeList),keyListToStr(keyList)));
type <- typeList[1L];
if (type == 'namedlist') { ## hash; recurse
allKeys <- unique(do.call(c,lapply(nodes,names)));
ret <- do.call(c,lapply(allKeys,function(key) extractLevelColumns(lapply(nodes,`[[`,key),...,keyList=c(keyList,key),sep=sep,mkname=mkname)));
} else if (type == 'list') { ## array; recurse
lenList <- do.call(c,lapply(tlList,`[[`,'len'));
maxLen <- max(lenList,na.rm=T);
allIndexes <- seq_len(maxLen);
ret <- do.call(c,lapply(allIndexes,function(index) extractLevelColumns(lapply(nodes,function(node) if (length(node) < index) NULL else node[[index]]),...,keyList=c(keyList,index),sep=sep,mkname=mkname))); ## must be careful to translate out-of-bounds to NULL; happens automatically with string keys, but not with integer indexes
} else if (type%in%c('raw','logical','integer','double','complex','character')) { ## atomic leaf node; build column
lenList <- do.call(c,lapply(tlList,`[[`,'len'));
maxLen <- max(lenList,na.rm=T);
if (is.null(sep)) {
ret <- lapply(seq_len(maxLen),function(i) setNames(data.frame(sapply(nodes,function(node) if (length(node) < i) NA else node[[i]]),...),mkname(c(keyList,i),maxLen)));
} else {
## keep original type if maxLen is 1, IOW don't stringify
ret <- list(setNames(data.frame(sapply(nodes,function(node) if (length(node) == 0L) NA else if (maxLen == 1L) node else paste(collapse=sep,node)),...),mkname(keyList,maxLen)));
}; ## end if
} else stop(sprintf('error: unsupported type %s at %s.',type,keyListToStr(keyList)));
if (is.null(ret)) ret <- list(); ## handle corner case of exclusively empty sublists
ret;
}
flattenList <- function(mainList,...) do.call(cbind,extractLevelColumns(mainList,...));
df <- flattenList(got$Members$Member);
df <- flattenList(got$Members$Member)
x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
x
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
is.null(got) <- got == NA
is.null(got$Members) <- got$Members == NA
is.null(got$Members) <- got$Members = NA
is.null(got$Members) <- got$Members = NA
got$Members[is.null(got$Members)] <- NA
x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
is.null(got$Members) <- got$Members = NA
got[is.null(got)] <- NA
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE)
got[is.null(got)] <- NA
x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE, simplyDataFrame = TRUE)
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE, simplyDataFrame = TRUE)
got[is.null(got)] <- NA
x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
dfs <- lapply(got$Members$Member, data.frame, stringsAsFactors = FALSE)
got$Members
got$Members$Member[is.null(got$Members$Member)] <- NA
x <- data.table::rbindlist(got$Members$Member, fill=TRUE, use.names = TRUE)
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE, simplyDataFrame = TRUE)
got$Members$Member[is.null(got$Members$Member)] <- NA
x <- data.table::rbindlist(got$Members$Member, fill=TRUE, use.names = TRUE)
x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
got$Members$Member[is.null(got$Members$Member)] <- NA
got$Members$Member
got$Members$Member$Interests[is.null(got$Members$Member$Interests)] <- NA
got$Members$Member
data.frame(matrix(as.numeric(as.character(unlist(got, recursive=F))), nrow=length(got), byrow=T))
z <- data.frame(matrix(as.numeric(as.character(unlist(got, recursive=F))), nrow=length(got), byrow=T))
z <- data.frame(matrix(as.numeric(as.character(unlist(got, recursive=T))), nrow=length(got), byrow=T))
class(got)
t<-rbind.fill(lapply(got, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
t<-dplyr::rbind.fill(lapply(got, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
t<-plyr::rbind.fill(lapply(got, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
t<-plyr::rbind.fill(lapply(got$Members, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
??rbind.fill
t<-plyr::rbind.fill.matrix(lapply(got$Members, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
got
alist = list(
list(name="Foo",age=22),
list(name="Bar"),
list(name="Baz",age=NULL)
)
alist
t<-plyr::rbind.fill.matrix(lapply(got$Members$Member, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
t
t<-plyr::rbind.fill.matrix(sapply(got$Members$Member, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
t<-plyr::rbind.fill.matrix(sapply(got$Members, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
t<-plyr::rbind.fill.matrix(lapply(got$Members, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
t<-plyr::rbind.fill.matrix(lapply(got$Members$Member, function(f) {
as.data.frame(Filter(Negate(is.null), f))
}))
t
x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
x <- data.table::rbindlist(got$Members$Member, fill=TRUE, use.names = TRUE)
replaceInList <- function (x, FUN, ...)
{
if (is.list(x)) {
for (i in seq_along(x)) {
x[i] <- list(replaceInList(x[[i]], FUN, ...))
}
x
}
else FUN(x, ...)
}
replaceInList(got, function(x)if(is.null(x))NA else x)
x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
got <- replaceInList(got, function(x)if(is.null(x))NA else x)
x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
x <- data.table::rbindlist(got$Members$Member, fill=TRUE, use.names = TRUE)
got$Members$Member
x <- data.table::rbindlist(got$Members$Member, fill=TRUE, use.names = TRUE)
rbindlist(lapply(got$Members$Member, as.data.table))
data.table::rbindlist(lapply(got$Members$Member, as.data.table))
data.table::rbindlist(lapply(got, as.data.table))
data.table::rbindlist(lapply(got, FUN=as.data.table))
??as.data.table
data.table::rbindlist(lapply(got, FUN=data.table::as.data.table))
dfs <- lapply(got$Members$Member, data.frame, stringsAsFactors = FALSE)
dfs
y <-dplyr::bind_rows(dfs)
y
rm(list=ls())
library(mnis)
roxygen2::roxygenise()
addinexamples:::reformatAddin()
roxygen2::roxygenise()
library(mnis)
roxygen2::roxygenise()
