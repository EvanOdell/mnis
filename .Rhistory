}
y <- mnis_Department()
y
names(y)
y <- mnis_ConstituencyResults()
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
x <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x
}
y <- mnis_ConstituencyResults()
y <- mnis_ConstituencyResults(3709)
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
x <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x
}
y <- mnis_ConstituencyResults(3709)
y
x <- as.list(got$ElectionResults)
x
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- got$ElectionResults
names(x$ElectionResult) <- sub("Information.", "", names(x$ElectionResult))
}
y <- mnis_ConstituencyResults(3709)
x$ElectionResult
names(x$ElectionResult) <- sub("Information.", "", names(x$ElectionResult))
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- got$ElectionResults
names(x$ElectionResult) <- sub("Information.", "", names(x$ElectionResult))
x
}
y <- mnis_ConstituencyResults(3709)
y
y <- mnis_ConstituencyResults(3709)
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- got$ElectionResults
x
}
y <- mnis_ConstituencyResults(3709)
y
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- got
x
}
y <- mnis_ConstituencyResults(3709)
y
rm(list=ls())
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- got$ElectionResults
x
}
y <- mnis_ConstituencyResults(3709)
y
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- got
x
}
y <- mnis_ConstituencyResults(3709)
y
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- got$Constituency
x
}
y <- mnis_ConstituencyResults(3709)
y
electionId <- 0
constituencyID=3079
constituencyID=3709
constituencyId <- as.character(constituencyId)
constituencyId <- 3709
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
details
class(details)
x <- got$Constituency$Results
x
class(x)
x <- as.data.frame(x)
x
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
x <- got$Constituency$Results
x <- as.data.frame(x)
names(x) <- sub("Election.", "Election_", names(x))
names(x) <- sub("Candidates.", "", names(x))
x
y <- c(details,x)
y
}
y <- mnis_ConstituencyResults(3709)
y
y <- list(details,x)
y
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
names(results) <- sub("Candidates.", "", names(results))
y <- c(list(results), details)
y
}
y <- mnis_ConstituencyResults(3709)
y
class(y[[1]])
y <- list()
y <- c(list(results), details)
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
names(results) <- sub("Candidates.", "", names(results))
y <- list()
y <- c(list(results), details)
y
y$``
y <- c(results, details)
y
y <- list()
y <- c(list(results), details)
y
y$``
y <- c(list("results"=results), list("details"=details))
y
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
names(results) <- sub("Candidate.", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
#names(results) <- sub("Candidate.", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
names(results) <- sub("Election..", "Election_", names(results))
names(results) <- sub("Candidates.Candidate.", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
#names(results) <- sub("Election..", "Election_", names(results))
names(results) <- sub("Candidates.Candidate.", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
#names(results) <- sub("Election..", "Election_", names(results))
names(results) <- sub("Candidates.Candidate.", "", names(results))
names(results) <- sub(".", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
names(results) <- sub("Candidates.Candidate.", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y$results
y$details
rm(list=ls())
roxygen2::roxygenise()
Date <- Sys.Date()
Date
class(Date)
mnis_LordsType <- function(Date = NULL) {
if(is.null(Date)==TRUE) {
Date <- Sys.Date()
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/LordsByType/"
query <- paste0(baseurl, Date, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got$LordsByType)
names(x) <- sub("Party.", "", names(x))
names(x) <- sub(".Id", "Id", names(x))
x
}
x <- mnis_LordsType()
x
rm(list=ls())
roxygen2::roxygenise()
x <- mnis_PartyState()
x
library(mnis)
x <- mnis_PartyState()
library(mnis)
x <- mnis_PartyState()
x
x
library(mnis)
rm(x)
library(mnis)
mnis_Parties(172)
mnis_Parties(172)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(mnis)
ref_Titles()
mnis::ref_Cabinets()
roxygen2::roxygenise()
formatR::tidy_dir("R")
roxygen2::roxygenise()
library(mnis)
devtools::use_build_ignore("NEWS.md")
devtools::use_build_ignore("NEWS.md")
devtools::use_build_ignore("cran-comments.Rmd")
devtools::use_build_ignore("cran-comments.md")
roxygen2::roxygenise()
devtools::build_win()
