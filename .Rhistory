#y <- do.call(rbind, lapply(dfs, data.frame, stringsAsFactors=FALSE))
#df <- plyr::rbind.fill(dfs)
x<-do.call(rbind, got$Members)
x <- as.data.frame(x)
#wlist <- data.table::rbindlist((mget(dfs(pattern=""))))
#z <- data.frame(matrix(as.numeric(as.character(unlist(got, recursive=F))), nrow=length(got), byrow=T))
#t<-plyr::cbind.fill.matrix(lapply(got$Members$Member, function(f) {
#as.data.frame(Filter(Negate(is.null), f))
#}))###Need to get this shit sorted out. Still producing lists in some variables that I don't want and I'm just too tired to deal with right now
}
x <- mnis_Interests(500)
View(x)
x$DateOfBirth
class(x$DateOfBirth)
class(x)
x <- as.data.frame(as.matrix(x))
x
x
View(x)
str(flatten(x, recursive = FALSE))
librar(jsonlite)
library(jsonlite)
str(flatten(x, recursive = FALSE))
y<-str(flatten(x, recursive = FALSE))
names(flatten(x))
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), simplifyVector = FALSE, simplifyDataFrame = TRUE, flatten = TRUE)
names(flatten(got))
data2 <- fromJSON("https://api.github.com/users/hadley/repos")
data2
View(data2)
danes(data2)
names(data2)
names(data2$owner)
names(flatten(data2))
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x<-do.call(rbind, got$Members)
x <- as.data.frame(as.matrix(x))
x<-do.call(rbind, got$Members)
x <- as.data.frame(as.matrix(x))
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <-as.data.frame(got)
names(flatten(got$Members))
names(flatten(got$Members$Member))
names(got$Members$Member)
names(got$Members)
names(got$Members$Member$DateOfDeath)
names(got$Members$Member$HouseEndDate)
names(got$Members$Member$Party)
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got
do.call(rbind, lapply(got$Members$Member[c('CurrentStatus', 'HouseEndDate')], '[[', 'duda'))
do.call(rbind, lapply(got$Members$Member[c('CurrentStatus', 'HouseEndDate')], '[[', 'Member'))
d<-do.call(rbind, lapply(got$Members$Member[c('CurrentStatus', 'HouseEndDate')], '[[', 'Member'))
d<-do.call(rbind, lapply(got$Members$Member[c('CurrentStatus', 'HouseEndDate')], '[', 'Member'))
View(d)
library(data.tree)
install.packages("data.tree")
library(data.tree)
gotNodes <- as.Node(got)
gotNodes
library(data.tree)
as.data.frame(gotNodes, row.names = NULL, optional = FALSE, ...,
traversal = c("pre-order", "post-order", "in-order", "level", "ancestor"),
pruneFun = NULL, filterFun = NULL, format = FALSE,
inheritFromAncestors = FALSE)
as.data.frame(gotNodes, row.names = NULL, optional = FALSE,
traversal = c("pre-order", "post-order", "in-order", "level", "ancestor"),
pruneFun = NULL, filterFun = NULL, format = FALSE,
inheritFromAncestors = FALSE)
n<-as.data.frame(gotNodes, row.names = NULL, optional = FALSE,
traversal = c("pre-order", "post-order", "in-order", "level", "ancestor"),
pruneFun = NULL, filterFun = NULL, format = FALSE,
inheritFromAncestors = FALSE)
View(n)
data(acme)
acme$fieldsAll
as.data.frame(acme, row.names = NULL, optional = FALSE, "cost", "p")
ToDataFrameTree(acme, "cost", "p")
ToDataFrameNetwork(acme, "cost", "p", direction = "climb")
ToDataFrameTable(acme, "cost", "p")
ToDataFrameTypeCol(acme)
acme
dd<-ToDataFrameTable(acme, "cost", "p")
dd
acme
gotNodes$fieldsAll
as.data.frame(acme, row.names = NULL, optional = FALSE, acme$fieldsAll)
ToDataFrameTree(acme, "cost", "p")
ToDataFrameNetwork(acme, "cost", "p", direction = "climb")
dd<-ToDataFrameTable(acme, "cost", "p")
ToDataFrameTypeCol(acme)
dd
as.data.frame(gotNodes, row.names = NULL, optional = FALSE, gotNodes$fieldsAll)
ToDataFrameTree(acme, "cost", "p")
as.data.frame(gotNodes, row.names = NULL, optional = FALSE, gotNodes$fieldsAll)
ToDataFrameTree(gotNodes,  gotNodes$fieldsAll)
ToDataFrameNetwork(gotNodes, gotNodes$fieldsAll, direction = "climb")
dd<-ToDataFrameTable(gotNodes, gotNodes$fieldsAll)
dd
View(dd)
ToDataFrameTable(gotNodes, gotNodes$fieldsAll)
dd<-ToDataFrameTypeCol(gotNodes)
dd
mnis_Interests <- function(ID=NULL, mem_id = TRUE, dods_id=FALSE, pims_id=FALSE) {
ID <- as.character(ID)
if(dods_id == TRUE){
ID_Type <- "dodsid="
} else if ( pims_id== TRUE){
ID_Type <- "pimsid="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
#is.null(got$Members) <- got$Members = NA
#got$Members$Member$Interests[is.null(got$Members$Member$Interests)] <- NA
#got$Members[which(got$Members==NULL)] = NA
#x<-do.call(rbind, got$Members)
#replaceInList <- function (x, FUN, ...)
#{
#  if (is.list(x)) {
#    for (i in seq_along(x)) {
#      x[i] <- list(replaceInList(x[[i]], FUN, ...))
#    }
#    x
#  }
#  else FUN(x, ...)
#}
#got <- replaceInList(got, function(x)if(is.null(x))NA else x)
#x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
#dfs <- data.table::rbindlist(lapply(got, FUN=data.table::as.data.table))
#dfs <- lapply(got$Members$Member, data.frame, stringsAsFactors = FALSE)
#y <- do.call(rbind, lapply(dfs, data.frame, stringsAsFactors=FALSE))
#df <- plyr::rbind.fill(dfs)
x<-do.call(rbind, got$Members)
x <- as.data.frame(as.matrix(x))
#wlist <- data.table::rbindlist((mget(dfs(pattern=""))))
#z <- data.frame(matrix(as.numeric(as.character(unlist(got, recursive=F))), nrow=length(got), byrow=T))
#t<-plyr::cbind.fill.matrix(lapply(got$Members$Member, function(f) {
#as.data.frame(Filter(Negate(is.null), f))
#}))###Need to get this shit sorted out. Still producing lists in some variables that I don't want and I'm just too tired to deal with right now
}
x <- mnis_Interests(172)
View(x)
colnames(flatten(got$Members$Member))
colnames(flatten(got$Members))
class(got$Members)
got$Members <- as.data.frame(got$Members)
got$Members$Member <- as.data.frame(got$Members$Member)
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE, recursive=TRUE)
options(stringsAsFactors=FALSE)
x <- data.frame(driver = c("Bowser", "Peach"), occupation = c("Koopa", "Princess"))
x$vehicle <- data.frame(model = c("Piranha Prowler", "Royal Racer"))
x$vehicle$stats <- data.frame(speed = c(55, 34), weight = c(67, 24), drift = c(35, 32))
str(x)
str(flatten(x))
str(flatten(x, recursive = FALSE))
got <- jsonlite::fromJSON(httr::content(got$content, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got$content, "text"), flatten = TRUE)
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
class(got)
got <- httr::GET(query, httr::accept_json())
class(got)
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
class(got)
got$request$output
got$content
got$request$fields
got$request
got$request$options
got$request$output
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got$Members$Member
names(flatten(got$Members$Member))
x<-do.call(rbind, got$Members)
x <- as.data.frame(as.matrix(x))
flatten(x
)
y<-flatten(x)
View(y)
x$Party
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
j
unlist(got)
do.call(cbind, unlist(got, recursive=FALSE))
x<-do.call(cbind, unlist(got, recursive=FALSE))
x<-do.call(rbind, unlist(got, recursive=FALSE))
x
View(x)
x<-do.call(rbind, unlist(got, recursive=TRUE))
x<-do.call(rbind, unlist(got))
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
unlist(got)
z <- unlist(got)
z
dd  <-  as.data.frame(matrix(unlist(got), nrow=length(unlist(got[1]))))
View(dd)
View(dd)
dd  <- rbind(matrix(unlist(got), nrow=length(unlist(got[1]))))
dd  <- cbind(matrix(unlist(got), nrow=length(unlist(got[1]))))
View(dd)
dd[1]
dd[[1]]
melt(got)
library(reshape2)
melt(got)
melt(dd)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
View(dl)
dl <- data.frame( sapply(got, length)),
Obs = unlist(got))
dl <- data.frame( sapply(got, length),
Obs = unlist(got))
dl <- data.frame(sapply(got, length),
Obs = unlist(got))
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
View(dl)
melt(dl, id.vars = "ID")
x<-melt(dl, id.vars = "ID")
View(x)
View(dl)
x<-melt(dl)
View(x)
cast(dl)
library(reshape2)
cast(dl)
??cast
dcast.data.table(dl)
library(data.table)
dcast.data.table(dl)
dcast(dl)
x<-cast(melt(dl))
x<-dcast(melt(dl))
t(dl)
zz <- t(dl)
class(zz)
zz<-as.data.frame(zz)
View(zz)
mnis_Interests <- function(ID=NULL, mem_id = TRUE, dods_id=FALSE, pims_id=FALSE) {
ID <- as.character(ID)
if(dods_id == TRUE){
ID_Type <- "dodsid="
} else if ( pims_id== TRUE){
ID_Type <- "pimsid="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
#is.null(got$Members) <- got$Members = NA
#got$Members$Member$Interests[is.null(got$Members$Member$Interests)] <- NA
#got$Members[which(got$Members==NULL)] = NA
#x<-do.call(rbind, got$Members)
#replaceInList <- function (x, FUN, ...)
#{
#  if (is.list(x)) {
#    for (i in seq_along(x)) {
#      x[i] <- list(replaceInList(x[[i]], FUN, ...))
#    }
#    x
#  }
#  else FUN(x, ...)
#}
#got <- replaceInList(got, function(x)if(is.null(x))NA else x)
#x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
#dfs <- data.table::rbindlist(lapply(got, FUN=data.table::as.data.table))
#dfs <- lapply(got$Members$Member, data.frame, stringsAsFactors = FALSE)
#y <- do.call(rbind, lapply(dfs, data.frame, stringsAsFactors=FALSE))
#df <- plyr::rbind.fill(dfs)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
zz <- t(dl)
zz<-as.data.frame(zz)
#wlist <- data.table::rbindlist((mget(dfs(pattern=""))))
#z <- data.frame(matrix(as.numeric(as.character(unlist(got, recursive=F))), nrow=length(got), byrow=T))
#t<-plyr::cbind.fill.matrix(lapply(got$Members$Member, function(f) {
#as.data.frame(Filter(Negate(is.null), f))
#}))###Need to get this shit sorted out. Still producing lists in some variables that I don't want and I'm just too tired to deal with right now
}
x <- mnis_Interests(172)
View(x)
zz[rownames(zz) != "ID", ]
mnis_Interests <- function(ID=NULL, mem_id = TRUE, dods_id=FALSE, pims_id=FALSE) {
ID <- as.character(ID)
if(dods_id == TRUE){
ID_Type <- "dodsid="
} else if ( pims_id== TRUE){
ID_Type <- "pimsid="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
#is.null(got$Members) <- got$Members = NA
#got$Members$Member$Interests[is.null(got$Members$Member$Interests)] <- NA
#got$Members[which(got$Members==NULL)] = NA
#x<-do.call(rbind, got$Members)
#replaceInList <- function (x, FUN, ...)
#{
#  if (is.list(x)) {
#    for (i in seq_along(x)) {
#      x[i] <- list(replaceInList(x[[i]], FUN, ...))
#    }
#    x
#  }
#  else FUN(x, ...)
#}
#got <- replaceInList(got, function(x)if(is.null(x))NA else x)
#x <- data.table::rbindlist(got$Members, fill=TRUE, use.names = TRUE)
#dfs <- data.table::rbindlist(lapply(got, FUN=data.table::as.data.table))
#dfs <- lapply(got$Members$Member, data.frame, stringsAsFactors = FALSE)
#y <- do.call(rbind, lapply(dfs, data.frame, stringsAsFactors=FALSE))
#df <- plyr::rbind.fill(dfs)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
zz <- t(dl)
zz<-as.data.frame(zz)
zz[rownames(zz) != "ID", ]
#wlist <- data.table::rbindlist((mget(dfs(pattern=""))))
#z <- data.frame(matrix(as.numeric(as.character(unlist(got, recursive=F))), nrow=length(got), byrow=T))
#t<-plyr::cbind.fill.matrix(lapply(got$Members$Member, function(f) {
#as.data.frame(Filter(Negate(is.null), f))
#}))###Need to get this shit sorted out. Still producing lists in some variables that I don't want and I'm just too tired to deal with right now
}
x <- mnis_Interests(172)
View(x)
data.frame
??data.frame
rm(list=ls())
mnis_Interests <- function(ID=NULL, mem_id = TRUE, dods_id=FALSE, pims_id=FALSE) {
ID <- as.character(ID)
if(dods_id == TRUE){
ID_Type <- "dodsid="
} else if ( pims_id== TRUE){
ID_Type <- "pimsid="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl,ID_Type, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
zz <- t(dl)
zz<-as.data.frame(zz)
zz[rownames(zz) != "ID", ]
}
x <- mnis_Interests(172)
View(x)
rm(list=ls())
library(mnis)
addinexamples:::reformatAddin()
roxygen2::roxygenise()
t <- mnis_Addresses(172)
ID_Type <- "id="
ID=172
ID <- as.character(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl,ID_Type, ID, "/Addresses")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
zz <- t(dl)
zz<-as.data.frame(zz)
View(zz)
zz[rownames(zz) != "ID", ]
mnis_Addresses <- function(ID=NULL, mem_id = TRUE, dods_id=FALSE, pims_id=FALSE) {
ID <- as.character(ID)
if(dods_id == TRUE){
ID_Type <- "dodsid="
} else if ( pims_id== TRUE){
ID_Type <- "pimsid="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl,ID_Type, ID, "/Addresses")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
zz <- t(dl)
zz<-as.data.frame(zz)
zz[rownames(zz) != "ID", ]
}
t <- mnis_Addresses(172)
names(tt)
names(t)
mnis_Interests <- function(ID=NULL, mem_id = TRUE, dods_id=FALSE, pims_id=FALSE) {
ID <- as.character(ID)
if(dods_id == TRUE){
ID_Type <- "dodsid="
} else if ( pims_id== TRUE){
ID_Type <- "pimsid="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl,ID_Type, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
zz <- t(dl)
zz<-as.data.frame(zz)
zz[rownames(zz) != "ID", ]
}
mnis_Interests <- function(ID=NULL, mem_id = TRUE, dods_id=FALSE, pims_id=FALSE) {
ID <- as.character(ID)
if(dods_id == TRUE){
ID_Type <- "dodsid="
} else if ( pims_id== TRUE){
ID_Type <- "pimsid="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl,ID_Type, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
x <- t(dl)
x<-as.data.frame(x)
x[rownames(x) != "ID", ]
}
rm(list=ls())
library(mnis)
x <- mnis_BasicDetails(172)
View(x)
addinexamples:::reformatAddin()
library(formatR)
tidy_dir("R")
roxygen2::roxygenise()
