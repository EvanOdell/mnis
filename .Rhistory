BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
gsub("[:|:][:|:]", "|", query)
query <- paste0(baseurl, ID, "|",FullBiog,"|", Addresses,"|",
BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
Addresses = "Addresses"
query <- paste0(baseurl, ID, "|",FullBiog,"|", Addresses,"|",
BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
gsub("[:|:][:|:]", "", query)
query <- paste0(baseurl, ID, "|",FullBiog,"|", Addresses,"|",
BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
gsub("[:|:][:|:]", "", query)
gsub("[:|:][:$:]", "", query)
query <- paste0(baseurl, ID, "|",FullBiog,"|", Addresses,"|",
BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
query <- gsub("[:|:][:|:]", "", query)
query
query <- gsub("[:|:][:|:]", "", query)
query <- paste0(baseurl, ID, "|",FullBiog,"|", Addresses,"|",
BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
query
query <- gsub("[:|:][:|:]", "", query)
query
query <- gsub("[:|:][:$:]", "", query)
query
query <- gsub("[:|:]$", "", query)
query
FullBiog = NULL
Addresses = NULL
query <- paste0(baseurl, ID, "|",FullBiog,"|", Addresses,"|",
BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
query
query <- gsub("[:|:][:|:]", "", query)
query
query <- gsub("[:|:]$", "", query)
query
mnis_extra <- function(ID, FullBiog = NULL, Addresses = NULL,
BasicDetails = NULL, BiographyEntries = NULL, Committees = NULL,
Constituencies = NULL, ElectionsContested = NULL, Experiences = NULL,
GovernmentPosts = NULL, Honours = NULL, HouseMemberships = NULL,
Interests = NULL, KnownAs = NULL, MaidenSpeeches = NULL,
OppositionPosts = NULL, OtherParliaments = NULL, ParliamentaryPosts = NULL,
Parties = NULL, PreferredNames = NULL, Staff = NULL, Statuses = NULL) {
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "|",FullBiog,"|", Addresses,"|",
BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
query <- gsub("[:|:][:|:]", "", query)
query <- gsub("[:|:]$", "", query)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
#parsed$Members
x <- as.data.frame(parsed$Members)
}
test <- mnis_extra(172, GovernmentPosts = FALSE)
mnis_extra <- function(ID, FullBiog = FALSE, Addresses = FALSE,
BasicDetails = FALSE, BiographyEntries = FALSE, Committees = FALSE,
Constituencies = FALSE, ElectionsContested = FALSE, Experiences = FALSE,
GovernmentPosts = FALSE, Honours = FALSE, HouseMemberships = FALSE,
Interests = FALSE, KnownAs = FALSE, MaidenSpeeches = FALSE,
OppositionPosts = FALSE, OtherParliaments = FALSE, ParliamentaryPosts = FALSE,
Parties = FALSE, PreferredNames = FALSE, Staff = FALSE, Statuses = FALSE) {
if(FullBiog == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
if(Addresses == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Addresses <- "Addresses"
if(BasicDetails == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
BasicDetails <- "BasicDetails"
if(BiographyEntries == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
BiographyEntries <- "BiographyEntries"
if(Committees == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Committees <- "Committees"
if(Constituencies == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Constituencies <- "Constituencies"
if(ElectionsContested == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
ElectionsContested <- "ElectionsContested"
if(Experiences == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Experiences <- "Experiences"
if(GovernmentPosts == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
GovernmentPosts <- "GovernmentPosts"
if(Honours == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Honours <- "Honours"
if(HouseMemberships == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
HouseMemberships <- "HouseMemberships"
if(Interests == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Interests <- "Interests"
if(KnownAs == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
KnownAs <- "KnownAs"
if(MaidenSpeeches == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
MaidenSpeeches <- "MaidenSpeeches"
if(OppositionPosts == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
OppositionPosts <- "OppositionPosts"
if(OtherParliaments == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
OtherParliaments <- "OtherParliaments"
if(ParliamentaryPosts == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
ParliamentaryPosts <- "ParliamentaryPosts"
if(Parties == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Parties <- "Parties"
if(PreferredNames == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
PreferredNames <- "PreferredNames"
if(Staff == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Staff <- "Staff"
if(Statuses == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Statuses <- "Statuses"
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "|",FullBiog,"|", Addresses,"|",
BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
query <- gsub("[:|:][:|:]", "", query)
query <- gsub("[:|:]$", "", query)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
#parsed$Members
x <- as.data.frame(parsed$Members)
}
test <- mnis_extra(172, GovernmentPosts = TRUE)
query <- paste0(baseurl, ID, "|",FullBiog,"|", Addresses,"|",
BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
query
query <- gsub("[:|:][:|:]", "", query)
query <- gsub("[:|:]$", "", query)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
x <- as.data.frame(parsed$Members)
parsed$Members
??fromJSON
x <- as.data.frame(parsed$Members)
test <- mnis_extra(172, GovernmentPosts = TRUE)
validate(parsed)
validate(got)
mnis_extra <- function(ID, FullBiog = FALSE, Addresses = FALSE,
BasicDetails = FALSE, BiographyEntries = FALSE, Committees = FALSE,
Constituencies = FALSE, ElectionsContested = FALSE, Experiences = FALSE,
GovernmentPosts = FALSE, Honours = FALSE, HouseMemberships = FALSE,
Interests = FALSE, KnownAs = FALSE, MaidenSpeeches = FALSE,
OppositionPosts = FALSE, OtherParliaments = FALSE, ParliamentaryPosts = FALSE,
Parties = FALSE, PreferredNames = FALSE, Staff = FALSE, Statuses = FALSE) {
if(FullBiog == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
if(Addresses == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Addresses <- "Addresses"
if(BasicDetails == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
BasicDetails <- "BasicDetails"
if(BiographyEntries == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
BiographyEntries <- "BiographyEntries"
if(Committees == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Committees <- "Committees"
if(Constituencies == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Constituencies <- "Constituencies"
if(ElectionsContested == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
ElectionsContested <- "ElectionsContested"
if(Experiences == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Experiences <- "Experiences"
if(GovernmentPosts == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
GovernmentPosts <- "GovernmentPosts"
if(Honours == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Honours <- "Honours"
if(HouseMemberships == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
HouseMemberships <- "HouseMemberships"
if(Interests == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Interests <- "Interests"
if(KnownAs == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
KnownAs <- "KnownAs"
if(MaidenSpeeches == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
MaidenSpeeches <- "MaidenSpeeches"
if(OppositionPosts == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
OppositionPosts <- "OppositionPosts"
if(OtherParliaments == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
OtherParliaments <- "OtherParliaments"
if(ParliamentaryPosts == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
ParliamentaryPosts <- "ParliamentaryPosts"
if(Parties == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Parties <- "Parties"
if(PreferredNames == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
PreferredNames <- "PreferredNames"
if(Staff == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Staff <- "Staff"
if(Statuses == TRUE){
FullBiog <- "FullBiog"
} else {FullBiog <- NULL}
Statuses <- "Statuses"
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "|",FullBiog,"|", Addresses,"|",
BasicDetails,"|", BiographyEntries,"|", Committees,"|",
Constituencies,"|", ElectionsContested,"|", Experiences,"|",
GovernmentPosts,"|", Honours,"|", HouseMemberships,"|",
Interests,"|", KnownAs,"|", MaidenSpeeches,"|",
OppositionPosts,"|", OtherParliaments,"|", ParliamentaryPosts,"|",
Parties,"|", PreferredNames,"|", Staff,"|", Statuses)
query <- gsub("[:|:][:|:]", "", query)
query <- gsub("[:|:]$", "", query)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
x <- as.data.frame(parsed$Members)
}
test <- mnis_extra(172, GovernmentPosts = TRUE, OtherParliaments = TRUE,Statuses = TRUE,Staff=TRUE)
mnis_base <- function(request) {
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, request)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
parsed$Members
x <- as.data.frame(parsed$Members)
}
mnis_base <- function(request) {
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, request)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
parsed$Members
x <- as.data.frame(parsed$Members)
}
x <- mnis_base('House=Commons|IsEligible=true/')
request <-'House=Commons|IsEligible=true/'
query <- paste0(baseurl, request)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
got <- httr::content(got, as = "text", encoding = "UTF-8-BOM")
got <- httr::content(got, as = "text")
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
??content
got <- httr::content(got, as = "application/json")
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "application/json")
got <- httr::content(got, as = "raw")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got <- httr::content(got, as = "text")
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got <- httr::content(got, as = "text", encoding = "UTF-8")
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text", encoding = "UTF-8")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text", encoding = "UTF8")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text", encoding = "UTF16")
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text", encoding = "UTF-16")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text", encoding = "UTF-32")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text", encoding = "UTF-8")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got
got <- httr::GET(query, accept_json())
got
got <- httr::GET(query, add_headers("application/json"))
got <- httr::content(got, as = "text", encoding = "UTF-8")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got <- httr::GET(query, add_headers("application/json"))
got
got <- httr::GET(query, add_headers(accept("application/json")))
got <- httr::GET(query, accept(add_headers("application/json")))
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/application/json/"
request <-'House=Commons|IsEligible=true/'
query <- paste0(baseurl, request)
got <- httr::GET(query, add_headers("application/json"))
got <- httr::content(got, as = "text", encoding = "UTF-8")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/application/json/"
request <-'House=Commons|IsEligible=true/'
query <- paste0(baseurl, request)
query
got <- httr::GET(query, add_headers("application/json"))
headers(got)
got <- httr::GET(query, accept_json())
headers(got)
got <- httr::GET(query, accept_xml())
headers(got)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text", type="application/json", encoding = "UTF-8")
got <- httr::content(got, as = "text", encoding = "UTF-8")
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text", encoding = "UTF-8")
headers(got)
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
parsed$Members
x <- as.data.frame(parsed$Members)
x
mnis_base <- function(request) {
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
#request <-'House=Commons|IsEligible=true/'
query <- paste0(baseurl, request)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text", encoding = "UTF-8")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
parsed$Members
x <- as.data.frame(parsed$Members)
}
x <- mnis_base('House=Commons|IsEligible=true/')
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got <- httr::content(got, encoding = "UTF-8")
got <- httr::GET(query, accept_json())
got <- httr::content(got, encoding = "UTF-8")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text", encoding = "UTF-8")
got
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
mnis_Staff <- function(ID) {
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "/", Staff)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
x <- as.data.frame(parsed$Members)
}
x <- mnis_Staff(172)
x <- mnis_Staff("172")
roxygen2::roxygenise()
use_build_ignore(sparecode.R, escape = TRUE, pkg = ".")
devtools::use_build_ignore(sparecode.R, escape = TRUE, pkg = ".")
devtools::use_build_ignore("sparecode.R", escape = TRUE, pkg = ".")
roxygen2::roxygenise()
roxygen2::roxygenise()
mnis_BasicDetails <- function(ID=NULL) {
ID<-intToUtf8(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "|", BasicDetails)
got <- httr::GET(query, accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
x <- as.data.frame(parsed$Members)
}
x <- mnis_BasicDetails(172)
mnis_BasicDetails <- function(ID=NULL) {
ID<-intToUtf8(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "|", BasicDetails)
got <- httr::GET(query, httr::accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
x <- as.data.frame(parsed$Members)
}
x <- mnis_BasicDetails(172)
ID=172
ID<-intToUtf8(ID)
ID=172
ID<-as.character(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "|", BasicDetails)
query
query <- paste0(baseurl, ID, "|", "BasicDetails")
query
mnis_BasicDetails <- function(ID=NULL) {
ID<-as.character(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "/BasicDetails")
got <- httr::GET(query, httr::accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
x <- as.data.frame(parsed$Members)
}
x <- mnis_BasicDetails(172)
ID<-as.character(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id="
query <- paste0(baseurl, ID, "/BasicDetails")
query
got <- httr::GET(query, httr::accept_json())
got <- httr::content(got, as = "text")
parsed <- jsonlite::fromJSON(got, flatten = TRUE)
x <- as.data.frame(parsed$Members)
x <- as.data.frame(parsed)
got <- httr::GET(query, accept_json())
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
rm(list=ls())
