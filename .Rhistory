} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl,ID_Type, ID, "/Addresses")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
zz <- t(dl)
zz<-as.data.frame(zz)
zz[rownames(zz) != "ID", ]
}
t <- mnis_Addresses(172)
names(tt)
names(t)
mnis_Interests <- function(ID=NULL, mem_id = TRUE, dods_id=FALSE, pims_id=FALSE) {
ID <- as.character(ID)
if(dods_id == TRUE){
ID_Type <- "dodsid="
} else if ( pims_id== TRUE){
ID_Type <- "pimsid="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl,ID_Type, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
zz <- t(dl)
zz<-as.data.frame(zz)
zz[rownames(zz) != "ID", ]
}
mnis_Interests <- function(ID=NULL, mem_id = TRUE, dods_id=FALSE, pims_id=FALSE) {
ID <- as.character(ID)
if(dods_id == TRUE){
ID_Type <- "dodsid="
} else if ( pims_id== TRUE){
ID_Type <- "pimsid="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl,ID_Type, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)),
Obs = unlist(got))
x <- t(dl)
x<-as.data.frame(x)
x[rownames(x) != "ID", ]
}
rm(list=ls())
library(mnis)
x <- mnis_BasicDetails(172)
View(x)
addinexamples:::reformatAddin()
library(formatR)
tidy_dir("R")
roxygen2::roxygenise()
library(formatR)
tidy_dir("R")
roxygen2::roxygenise()
roxygen2::roxygenise()
library(mnis)
rm(list=ls())
mnis_extra <- function(ID, mem_id = TRUE, refDods = FALSE, FullBiog = TRUE, Addresses = TRUE, BasicDetails = TRUE, BiographyEntries = TRUE,
Committees = TRUE, Constituencies = TRUE, ElectionsContested = TRUE, Experiences = TRUE, GovernmentPosts = TRUE, Honours = TRUE,
HouseMemberships = TRUE, Interests = TRUE, KnownAs = TRUE, MaidenSpeeches = TRUE, OppositionPosts = TRUE, OtherParliaments = TRUE,
ParliamentaryPosts = TRUE, Parties = TRUE, PreferredNames = TRUE, Staff = TRUE, Statuses = TRUE) {
ID <- as.character(ID)
if (refDods == TRUE) {
ID_Type <- "refDods="
} else {
ID_Type <- "id="
}
# Replace all this with calls to the specific functions, then combine into one data frame. Much easier, also gets
# around the call limit
if (FullBiog == TRUE)
FullBiog_DF <- mnis_FullBiog(ID)
if (Addresses == TRUE)
Addresses_DF <- mnis_Addresses(ID)
if (BasicDetails == TRUE)
BasicDetails_DF <- mnis_BasicDetails(ID)
if (BiographyEntries == TRUE)
BiographyEntries_DF <- mnis_BiographyEntries(ID)
if (Committees == TRUE)
Committees_DF <- mnis_Committees(ID)
if (Constituencies == TRUE)
Constituencies_DF <- mnis_Constituencies(ID)
if (ElectionsContested == TRUE)
ElectionsContested_DF <- mnis_ElectionsContested(ID)
if (Experiences == TRUE)
Experiences_DF <- mnis_Experiences(ID)
if (GovernmentPosts == TRUE)
GovernmentPosts_DF <- mnis_GovernmentPosts(ID)
if (Honours == TRUE)
Honours_DF <- mnis_Honours(ID)
if (HouseMemberships == TRUE)
HouseMemberships_DF <- mnis_HouseMemberships(ID)
if (Interests == TRUE)
Interests_DF <- mnis_Interests(ID)
if (KnownAs == TRUE)
KnownAs_DF <- mnis_KnownAs(ID)
if (MaidenSpeeches == TRUE)
MaidenSpeeches_DF <- mnis_MaidenSpeeches(ID)
if (OppositionPosts == TRUE)
OppositionPosts_DF <- mnis_OppositionPosts(ID)
if (OtherParliaments == TRUE)
OtherParliaments_DF <- mnis_OtherParliaments(ID)
if (ParliamentaryPosts == TRUE)
ParliamentaryPosts_DF <- mnis_ParliamentaryPosts(ID)
if (Parties == TRUE)
Parties_DF <- mnis_Parties(ID)
if (PreferredNames == TRUE)
PreferredNames_DF <- mnis_PreferredNames(ID)
if (Staff == TRUE)
Staff_DF <- mnis_Staff(ID)
if (Statuses == TRUE)
Statuses_DF <- mnis_Statuses(ID)
}
x <- mnis_extra(172)
library(mnis)
x <- mnis_extra(172)
warnings()
View(x)
addinexamples:::reformatAddin()
??join_all
x <- plyr::join_all(mnis_DF_list, match = "first")
mnis_DF_list <- list(FullBiog_DF, Addresses_DF, BasicDetails_DF, BiographyEntries_DF,
Committees_DF, Constituencies_DF, ElectionsContested_DF, Experiences_DF,
GovernmentPosts_DF, Honours_DF, HouseMemberships_DF, Interests_DF, KnownAs_DF,
MaidenSpeeches_DF, OppositionPosts_DF, OtherParliaments_DF, ParliamentaryPosts_DF,
Parties_DF, PreferredNames_DF, Staff_DF, Statuses_DF)
mnis_extra <- function(ID, mem_id = TRUE, refDods = FALSE, FullBiog = TRUE, Addresses = TRUE,
BasicDetails = TRUE, BiographyEntries = TRUE, Committees = TRUE, Constituencies = TRUE,
ElectionsContested = TRUE, Experiences = TRUE, GovernmentPosts = TRUE, Honours = TRUE,
HouseMemberships = TRUE, Interests = TRUE, KnownAs = TRUE, MaidenSpeeches = TRUE,
OppositionPosts = TRUE, OtherParliaments = TRUE, ParliamentaryPosts = TRUE, Parties = TRUE,
PreferredNames = TRUE, Staff = TRUE, Statuses = TRUE) {
ID <- as.character(ID)
if (refDods == TRUE) {
ID_Type <- "refDods="
} else {
ID_Type <- "id="
}
# Replace all this with calls to the specific functions, then combine into one
# data frame. Much easier, also gets around the call limit
if (FullBiog == TRUE)
FullBiog_DF <- mnis_FullBiog(ID)
if (Addresses == TRUE)
Addresses_DF <- mnis_Addresses(ID)
if (BasicDetails == TRUE)
BasicDetails_DF <- mnis_BasicDetails(ID)
if (BiographyEntries == TRUE)
BiographyEntries_DF <- mnis_BiographyEntries(ID)
if (Committees == TRUE)
Committees_DF <- mnis_Committees(ID)
if (Constituencies == TRUE)
Constituencies_DF <- mnis_Constituencies(ID)
if (ElectionsContested == TRUE)
ElectionsContested_DF <- mnis_ElectionsContested(ID)
if (Experiences == TRUE)
Experiences_DF <- mnis_Experiences(ID)
if (GovernmentPosts == TRUE)
GovernmentPosts_DF <- mnis_GovernmentPosts(ID)
if (Honours == TRUE)
Honours_DF <- mnis_Honours(ID)
if (HouseMemberships == TRUE)
HouseMemberships_DF <- mnis_HouseMemberships(ID)
if (Interests == TRUE)
Interests_DF <- mnis_Interests(ID)
if (KnownAs == TRUE)
KnownAs_DF <- mnis_KnownAs(ID)
if (MaidenSpeeches == TRUE)
MaidenSpeeches_DF <- mnis_MaidenSpeeches(ID)
if (OppositionPosts == TRUE)
OppositionPosts_DF <- mnis_OppositionPosts(ID)
if (OtherParliaments == TRUE)
OtherParliaments_DF <- mnis_OtherParliaments(ID)
if (ParliamentaryPosts == TRUE)
ParliamentaryPosts_DF <- mnis_ParliamentaryPosts(ID)
if (Parties == TRUE)
Parties_DF <- mnis_Parties(ID)
if (PreferredNames == TRUE)
PreferredNames_DF <- mnis_PreferredNames(ID)
if (Staff == TRUE)
Staff_DF <- mnis_Staff(ID)
if (Statuses == TRUE)
Statuses_DF <- mnis_Statuses(ID)
mnis_DF_list <- list(FullBiog_DF, Addresses_DF, BasicDetails_DF, BiographyEntries_DF,
Committees_DF, Constituencies_DF, ElectionsContested_DF, Experiences_DF,
GovernmentPosts_DF, Honours_DF, HouseMemberships_DF, Interests_DF, KnownAs_DF,
MaidenSpeeches_DF, OppositionPosts_DF, OtherParliaments_DF, ParliamentaryPosts_DF,
Parties_DF, PreferredNames_DF, Staff_DF, Statuses_DF)
x <- plyr::join_all(mnis_DF_list, match = "first")
}
x <- mnis_extra(172)
names(x)
x$`Members.Member.OppositionPosts.OppositionPost.@Id`
summary(x$`Members.Member.OppositionPosts.OppositionPost.@Id`)
yx <- mnis_OppositionPosts(172)
View(yx)
??fromJSON
fromJSON('{"city" : "Z\\u00FCrich"}')
library(jsonlite)
fromJSON('{"city" : "Z\\u00FCrich"}')
got <- httr::GET(query, httr::accept_json(), fileEncoding = "UTF-8-BOM")
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/OppositionPosts")
ID=172
ID_Type <- "id="
ID <- as.character(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/OppositionPosts")
got <- httr::GET(query, httr::accept_json(), fileEncoding = "UTF-8-BOM")
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
??GET
httr_options()
library(httr)
httr_options()
??accept_encoding
got <- httr::GET(query, httr::accept_json(), fileEncoding = "UTF-8-BOM")
class(got)
gsub("e", "", got)
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
query <- paste0(baseurl, ID_Type, ID, "/OppositionPosts")
got <- httr::GET(query, httr::accept_json(), fileEncoding = "UTF-8-BOM")
gsub("U+FEFF", "", got)
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json(), fileEncoding = "UTF-8-BOM")
gsub("0xEF,0xBB,0xBF", "", got)
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json(), fileEncoding = "UTF-8-BOM")
gsub("0xEF", "", got)
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
gsub("0xEF", "", got)
gsub("0xBB", "", got)
gsub("0xBF", "", got)
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json(), fileEncoding = "UTF-8-BOM")
gsub("0xEF", "", got)
gsub("0xBB", "", got)
gsub("0xBF", "", got)
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json(), fileEncoding = "UTF-8-BOM")
gsub("ï»¿", "", got)
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json(), fileEncoding = "UTF-8-BOM")
gsub("\xBB", "", got)
gsub("\xEF", "", got)
gsub("\xbF", "", got)
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json())
gsub("\xBB", "", got)
gsub("\xEF", "", got)
gsub("\xbF", "", got)
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
roxygen2::roxygenise()
library(mnis)
roxygen2::roxygenise()
roxygen2::roxygenise()
rm(list=ls())
library(mnis)
x <- mnis_Addresses(172)
x
head(x)
names(x)
y <- mnis_BasicDetails(172)
names(y)
names(x) <- sapply(names(x),function(z) {
if(substring(z,4,4) %in% c("H","K"))
sub("SM","Control",z)
else if(substring(z,4,4) %in% c("X","V"))
sub("SM","Case",z)
})
names(x)
x <- mnis_Addresses(172)
names(x)
names(x) <- sub("Members.Member.", "", names(x))
names(x)
z<- mnis_GovernmentPosts(172)
names(z)
x <- mnis_extra(172)
names(x)
library(mnis)
x <- mnis_extra(172)
x <- mnis_Honours(172)
x
library(mnis)
x <- mnis_Honours(172)
x
names(x)
x <- mnis_BasicDetails(172)
x
head(x)
library(mnis)
x <- mnis_extra(172)
names(x)
x <- mnis_BasicDetails(172)
x
names(x) <- sub("Members.Member.", "", names(x))
x
library(mnis)
x <- mnis_BasicDetails(172)
x
names(x) %>% sub("Members.Member.", "", names(x))
library(maggitr)
library(magrittr)
names(x) %>% sub("Members.Member.", "", names(x))
class(names(x))
library(mnis)
x <- mnis_BasicDetails(172)
x
class(x)
x <- as.data.frame(x)
x
library(mnis)
x <- mnis_BasicDetails(172)
x
names(x)
ID=172
ID <- as.character(ID)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/BasicDetails")
ID_Type <- "refDods="
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/BasicDetails")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
x <- t(dl)
x <- as.data.frame(x)
x[rownames(x) != "ID", ]
x
ID_Type <- "id="
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/BasicDetails")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
class(dl)
names(dl) <- gsub("Members.Member.", "", names(dl))
dl
x <- t(dl)
x
x <- gsub("Members.Member.", "", x)
x <- as.data.frame(x)
x[rownames(x) != "ID", ]
x
x <- t(dl)
class(x)
x <- t(dl)
x <- sub("Members.Member.", "", x)
x
sub("Members.Member.", "", x)
sub("Members.Member.", "", x)
sub("Members.Member.", " ", x)
x <- as.data.frame(x)
x[rownames(x) != "ID", ]
x
head(x)
x[rownames(x) != "ID", ]
head(x)
x[rownames(x) != "ID", ]
x
x<- x[rownames(x) != "ID", ]
x
sub("Members.Member.", " ", x, fixed = TRUE)
c
x
x<-sub("Members.Member.", " ", x, fixed = TRUE)
x <- as.data.frame(x)
x
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
x <- t(dl)
x<-sub("Members.Member.", " ", x, fixed = TRUE)
x <- as.data.frame(x)
x <- x[rownames(x) != "ID", ]
x
class(x)
x<-gsub("Members.Member.", "", x, fixed = TRUE)
x <- as.data.frame(x)
x <- x[rownames(x) != "ID", ]
x
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
x <- t(dl)
x<-gsub("Members.Member.", "", x, fixed = TRUE)
x <- as.data.frame(x)
x <- x[rownames(x) != "ID", ]
x
names(x)
substring(x, "Members.Member.")
??substring
names(x) <- sapply(names(x),function(z) {
if(substring(z,1,15) %in% c("Members.Member.","Members.Member."))
sub("Members.Member.","",z)
})
x
View(x)
x <- mnis_BasicDetails(172)
View(x)
names(x) <- sapply(names(x),function(z) {
if(substring(z,1,15) %in% c("Members.Member."))
sub("Members.Member.","",z)
})
x <- sub("@", "", names(x))
x <- gsub("@", "", names(x))
x
names(x) <- gsub("@", "", names(x))
x <- mnis_BasicDetails(172)
names(x) <- gsub("@", "", names(x))
names(x) <- gsub("Members.Member.", "", names(x))
x <- x[rownames(x) != "ID", ]
library(mnis)
x <- mnis_BasicDetails(172)
names(x)
x <- mnis_BasicDetails(172)
class(x)
x
library(mnis)
x <- mnis_BasicDetails(172)
x
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/BasicDetails")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
x <- t(dl)
x<-gsub("Members.Member.", "", x, fixed = TRUE)
x <- as.data.frame(x)
x <- x[rownames(x) != "ID", ]
x
names(x) <- sapply(names(x),function(z) {
if(substring(z,1,15) %in% c("Members.Member."))
sub("Members.Member.","",z)
})
x
rm(list=ls())
library(mnis)
x <- mnis_BasicDetails(172)
x
rm(x)
library(mnis)
x <- mnis_BasicDetails(172)
x
class(x)
rm(x)
library(mnis)
library(mnis)
x <- mnis_BasicDetails(172)
x
class(x)
rm(x)
library(mnis)
x <- mnis_BasicDetails(172)
x
