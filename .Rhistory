got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- got$Constituency
x
}
y <- mnis_ConstituencyResults(3709)
y
electionId <- 0
constituencyID=3079
constituencyID=3709
constituencyId <- as.character(constituencyId)
constituencyId <- 3709
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
details
class(details)
x <- got$Constituency$Results
x
class(x)
x <- as.data.frame(x)
x
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
x <- got$Constituency$Results
x <- as.data.frame(x)
names(x) <- sub("Election.", "Election_", names(x))
names(x) <- sub("Candidates.", "", names(x))
x
y <- c(details,x)
y
}
y <- mnis_ConstituencyResults(3709)
y
y <- list(details,x)
y
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
names(results) <- sub("Candidates.", "", names(results))
y <- c(list(results), details)
y
}
y <- mnis_ConstituencyResults(3709)
y
class(y[[1]])
y <- list()
y <- c(list(results), details)
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
names(results) <- sub("Candidates.", "", names(results))
y <- list()
y <- c(list(results), details)
y
y$``
y <- c(results, details)
y
y <- list()
y <- c(list(results), details)
y
y$``
y <- c(list("results"=results), list("details"=details))
y
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
names(results) <- sub("Candidate.", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
#names(results) <- sub("Candidate.", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
names(results) <- sub("Election..", "Election_", names(results))
names(results) <- sub("Candidates.Candidate.", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
#names(results) <- sub("Election..", "Election_", names(results))
names(results) <- sub("Candidates.Candidate.", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
#names(results) <- sub("Election..", "Election_", names(results))
names(results) <- sub("Candidates.Candidate.", "", names(results))
names(results) <- sub(".", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y$results
mnis_ConstituencyResults <- function(constituencyId = NULL, electionId = NULL) {
if(is.null(constituencyId)==TRUE) {
stop("constituencyId cannot be empty", call. = FALSE)
}
if(is.null(electionId)==TRUE) {
electionId <- 0
}
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
details <- got$Constituency$Details
results <- got$Constituency$Results
results <- as.data.frame(results)
names(results) <- sub("Election.", "Election_", names(results))
names(results) <- sub("Candidates.Candidate.", "", names(results))
y <- list()
y <- c(list("results"=results), list("details"=details))
y
}
y <- mnis_ConstituencyResults(3709)
y$results
y$details
rm(list=ls())
roxygen2::roxygenise()
Date <- Sys.Date()
Date
class(Date)
mnis_LordsType <- function(Date = NULL) {
if(is.null(Date)==TRUE) {
Date <- Sys.Date()
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/LordsByType/"
query <- paste0(baseurl, Date, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got$LordsByType)
names(x) <- sub("Party.", "", names(x))
names(x) <- sub(".Id", "Id", names(x))
x
}
x <- mnis_LordsType()
x
rm(list=ls())
roxygen2::roxygenise()
x <- mnis_PartyState()
x
library(mnis)
x <- mnis_PartyState()
library(mnis)
x <- mnis_PartyState()
x
x
library(mnis)
rm(x)
library(mnis)
mnis_Parties(172)
mnis_Parties(172)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(mnis)
ref_Titles()
mnis::ref_Cabinets()
roxygen2::roxygenise()
formatR::tidy_dir("R")
roxygen2::roxygenise()
library(mnis)
devtools::use_build_ignore("NEWS.md")
devtools::use_build_ignore("NEWS.md")
devtools::use_build_ignore("cran-comments.Rmd")
devtools::use_build_ignore("cran-comments.md")
roxygen2::roxygenise()
devtools::build_win()
devtools::release()
devtools::release()
devtools::release()
citation("mnis")
library(mnis)
citation("mnis")
install.packages(c("git2r", "shinyjs"))
library(dplyr)
??dplyr
mnis_GeneralElectionResults <- function(locationType = "Country", locationName = "Great Britain", startDate = "1900-01-01", endDate = Sys.Date()) {
.Deprecated("mnis_GeneralElectionResults", package = mnis)
mnis_general_election_results(locationType = locationType, locationName = locationName, startDate = startDate, endDate = endDate)
}
x <- mnis_GeneralElectionResults()
help("dplyr-defunct")
??dplyr-defunct
help("dplyr-deprecated")
roxygen2::roxygenise()
x <- mnis_GeneralElectionResults(locationType = 'Country', locationName = 'England',
#'                                  startDate = '2010-01-01', endDate = '2016-01-01')
)
x <- mnis_GeneralElectionResults(locationType = 'Country', locationName = 'England',startDate = '2010-01-01', endDate = '2016-01-01')
mnis_GeneralElectionResults <- function(locationType = "Country", locationName = "Great Britain", startDate = "1900-01-01", endDate = Sys.Date()) {
.Deprecated("mnis_general_election_results")
mnis_general_election_results(locationType = locationType, locationName = locationName, startDate = startDate, endDate = endDate)
}
x <- mnis_GeneralElectionResults(locationType = 'Country', locationName = 'England',startDate = '2010-01-01', endDate = '2016-01-01')
formatR::tidy_dir("R")
roxygen2::roxygenise()
test <- mnis_Parties
library(mnis)
test <- mnis_Parties
test <- mnis_Parties()
library(dplyr)
x <- rbind_all()
x <- rbind_all(x)
x <- rbind_all(1)
list=list()
x <- rbind_all(list)
mnis_PreferredNames <- function(ID = NULL, mem_id = TRUE, refDods = FALSE) {
.Deprecated("mnis_preferred_names")
mnis_preferred_names_(ID = ID, mem_id = mem_id, refDods = refDods)
}
x <- mnis_PreferredNames()
mnis_PreferredNames <- function(ID = NULL, mem_id = TRUE, refDods = FALSE) {
.Deprecated("mnis_preferred_names")
mnis_preferred_names(ID = ID, mem_id = mem_id, refDods = refDods)
}
x <- mnis_PreferredNames()
x <- mnis_PreferredNames(172)
formatR::tidy_dir("R")
roxygen2::roxygenise()
x <- mnis_BiographyEntries()
library(mnis)
x <- mnis_BiographyEntries()
x <- mnis_BiographyEntries(172)
library(mnis)
library(mnis)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(mnis)
rm(list-ls())
rm(list=ls())
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(syuzhet)
poa_word_v <- get_text_as_string("random.txt")
poa_word_v <- get_text_as_string("random.txt")
x <- get_sentiment(poa_word_v, method="bing")
x
t <- get_sentences(poa_word_v)
x <- get_sentiment(t, method="bing")
x
summary(x)
mean(x)
poa_word_v <- get_text_as_string("random.txt")
t <- get_sentences(poa_word_v)
x <- get_sentiment(t, method="bing")
x
mean(x)
median(x)
rm(list=ls())
library(mnis)
x <- mnis_basic_details(172)
x
print(x)
head(x)
View(x)
y <- mnis_basic_details(172)
names(y)
names(x)
mnis_basic_details <- function(ID = NULL, mem_id = TRUE, refDods = FALSE) {
if (is.null(ID) == TRUE) {
stop("ID cannot be empty", call. = FALSE)
}
ID <- as.character(ID)
if (refDods == TRUE) {
ID_Type <- "refDods="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/BasicDetails")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
x <- t(dl)
x <- as.data.frame(x)
x <- x[rownames(x) != "ID", ]
x
names(x) <- gsub("@", "", names(x))
names(x) <- gsub("#", "", names(x))
names(x) <- gsub("Members.Member.", "", names(x))
names(x) <- gsub(".xsi:nil", "", names(x))
x
}
y <- mnis_basic_details(172)
names(y)
mnis_basic_details <- function(ID = NULL, mem_id = TRUE, refDods = FALSE) {
if (is.null(ID) == TRUE) {
stop("ID cannot be empty", call. = FALSE)
}
ID <- as.character(ID)
if (refDods == TRUE) {
ID_Type <- "refDods="
} else {
ID_Type <- "id="
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/BasicDetails")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
x <- t(dl)
x <- as.data.frame(x)
x <- x[rownames(x) != "ID", ]
x
names(x) <- gsub("@", "", names(x))
names(x) <- gsub("#", "", names(x))
names(x) <- gsub("Members.Member.", "", names(x))
names(x) <- gsub(".xsi:nil", "", names(x))
names(x) <- gsub(".xmlns:xsi", "", names(x))
names(x) <- gsub("BasicDetails.", "", names(x))
x
}
y <- mnis_basic_details(172)
names(y)
y <- mnis_biography_entries(172)
y
names(y)
library(mnis)
y <- mnis_biography_entries(172)
y
names(y)
library(mnis)
library(mnis)
x <- mnis_opposition_posts(172)
x
names(x)
x <- mnis_staff(172)
x
names(x)
x <- mnis_house_memberships(172)
x
names(x)
x <- mnis_committees(172)
x
names(x)
x <- mnis_addresses(172)
names(x)
x <- mnis_constituencies(172)
x
names(x)
library(mnis)
roxygen2::roxygenise()
roxygen2::roxygenise()
