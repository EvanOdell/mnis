<<<<<<< HEAD
roxygen2::roxygenise()
Date <- Sys.Date()
Date
class(Date)
mnis_LordsType <- function(Date = NULL) {
if(is.null(Date)==TRUE) {
Date <- Sys.Date()
}
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/LordsByType/"
query <- paste0(baseurl, Date, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got$LordsByType)
names(x) <- sub("Party.", "", names(x))
names(x) <- sub(".Id", "Id", names(x))
x
}
x <- mnis_LordsType()
x
rm(list=ls())
roxygen2::roxygenise()
x <- mnis_PartyState()
x
=======
rm(x)
x<-ref_parliamentary_ranks()
names(x)
>>>>>>> b5953afe08d6c0893962551010ba5591fa852706
library(mnis)
x<-ref_parliamentary_ranks()
names(x)
library(mnis)
x<-ref_parliamentary_ranks()
names(x)
library(mnis)
x<-ref_parliamentary_ranks()
names(x)
library(mnis)
x<-ref_parliamentary_ranks()
names(x)
library(mnis)
x <- mnis_full_biog(172)
names(x)
x <- mnis_full_biog(172, clean=FALSE)
names(x)
library(mnis)
x <- mnis_full_biog(172)
names(x)
library(mnis)
x <- mnis_full_biog(172)
names(x)
library(mnis)
x <- mnis_full_biog(172)
names(x)
library(mnis)
x <- mnis_full_biog(172)
names(x)
library(mnis)
x <- mnis_full_biog(172)
names(x)
x <- mnis_full_biog(172, clean=FALSE)
names(x)
library(mnis)
x <- mnis_full_biog(172)
names(x)
library(mnis)
library(mnis)
x <- mnis_full_biog(172)
names(x)
x <- mnis_full_biog(172, clean=FALSE)
names(x)
View(x)
library(mnis)
x <- mnis_full_biog(172)
names(x)
library(hansard)
hansard::members_search("osborne")
x <- hansard::members_search("osborne")
x
x <- mnis_full_biog(1458)
names(x)
x <- mnis_honours(1458)
x
names(x)
x <- mnis_honours(172)
names(x)
x <- mnis_honours(1458)
View(x)
library(mnis)
x <- mnis_honours(1458)
names(x)
mnis_additional()
x <- mnis_elections_contested(172)
names(x)
x
x <- mnis_elections_contested()
dplyr::rename()
??rename
??mnis
x <- hansard::members_search("blair")
x
x <- mnis_elections_contested(512)
x
View(x)
x <- mnis_elections_contested(512, clean=FALSE)
View(x)
names(x)
library(mnis)
x <- mnis_elections_contested(512)
x
View(x)
mnis_additional()
x <- mnis_experiences(512)
View(x)
x <- mnis_experiences(3898)
View(x)
x <- mnis_experiences(3898,clean=FALSE)
View(x)
x <- mnis_government_posts(1498)
View(x)
x <- mnis_government_posts(1458)
x
x <- mnis_government_posts(172)
x
x <- mnis_government_posts(512)
x
x <- mnis_government_posts(1467)
x
x <- mnis_government_posts(1467,clean=FALSE)
x
x <- members_search("theresa may")
x
x <- mnis_government_posts(8,clean=FALSE)
View(x)
mnis_additional()
x <- mnis_interests(500)
x
names(x)
x <- mnis_interests(500,clean=FALSE)
names(x)
ID_Type <- "id="
ID <- 500
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
got
got$request
got$request$output
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/Constituencies")
got <- httr::GET(query, httr::accept_json())
got$headers
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got
s <- as.data.frame(got)
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
View(dl)
x <- t(dl)
x <- as.data.frame(x)
View(x)
names(x) <- as.matrix(x[1, ])
x <- x[-1, ]
x[] <- lapply(x, function(x) type.convert(as.character(x)))
x
View(x)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/"
query <- paste0(baseurl, ID_Type, ID, "/Interests")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
dl <- data.frame(ID = rep(names(got), sapply(got, length)), Obs = unlist(got))
x <- t(dl)
View(x)
View(dl)
got$Members$Membe
got$Members$Member
x <- got$Members$Member
x
x <- as.data.frame(x)
x <- as.list(got$Members$Member)
x <- unlist(x)
x <- t(x)
x <- as.data.frame(x)
View(x)
library(mnis)
rm(list=ls())
x <- mnis_interests(500)
names(x)
x <- mnis_interests(500,clean=FALSE)
x
names(x)
library(mnis)
x <- mnis_interests(500)
names(x)
x <- mnis_honours(500)
x
mnis_additional()
x <- mnis_opposition_posts(172)
x
View(x)
x <- members_search("salmond")
x
members_search("salmond")
x <- mnis_other_parliaments(577)
x
x <- mnis_other_parliaments(577,clean=FALSE)
names(x)
mnis_additional()
x <- mnis_parliamentary_posts(17)
x
names(x)
x <- mnis_parliamentary_posts(17,clean=FALSE)
names(x)
mnis_additional()
library(mnis)
rm(list=ls())
x <- mnis_eligible()
head(x)
x <- mnis_eligible(clean=FALSE)
head(x)
library(mnis)
x <- mnis_eligible()
names(x)
x <- mnis_department()
names(x)
library(mnis)
x <- mnis_department()
names(x)
x <- mnis_department(clean=FALSE)
names(x)
library(mnis)
x <- mnis_department()
names(x)
x <- mnis_department(clean=FALSE)
names(x)
library(mnis)
x <- mnis_department()
names(x)
x <- mnis_department(clean=FALSE)
names(x)
library(mnis)
x <- mnis_department()
names(x)
ref_constituencies()
x <- ref_constituencies()
x
head(x)
x <- ref_constituencies(5)
x
head(x)
x <- mnis_constituency_results(5)
x <- mnis_constituency_results(3701)
x
names(x)
head(x)
x$results
x$details
x <- mnis_constituency_results(3701,clean=FALSE)
x
x$results
x$details
library(mnis)
x <- mnis_constituency_results(3701)
x$results
x <- mnis_constituency_results(3701,clean=FALSE)
x$results
library(mnis)
x <- mnis_constituency_results(3701)
x$results
formatR::tidy_dir("R")
library(mnis)
x <- mnis_constituency_results(3701)
library(mnis)
x <- mnis_constituency_results(3701)
x
x$results
x <- mnis_constituency_results(5)
rm(x)
roxygen2::roxygenise()
electionId=5
constituencyId=5
electionId=0
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
http_error(query)
status_code(http_error(query))
http_error(5)
http_error(electionId)
library(mnis)
x <- mnis_constituency_results(5)
rm(list=ls())
library(mnis)
x <- mnis_constituency_results(5)
library(mnis)
x <- mnis_constituency_results(5)
??sprintf
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
constituencyId=5
electionId=5
constituencyId <- as.character(constituencyId)
electionId <- as.character(electionId)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json())
got
electionID=0
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
got
constituencyId=3701
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
got
electionid=0
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
got
electionId=0
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/ConstituencyResults/"
query <- paste0(baseurl, constituencyId, "/", electionId, "/")
got <- httr::GET(query, httr::accept_json())
got
library(mnis)
x <- mnis_constituency_results(5)
library(mnis)
x <- mnis_constituency_results(5)
library(mnis)
x <- mnis_constituency_results(5)
x <- mnis_constituency_results(5)
library(mnis)
x <- mnis_constituency_results(5)
library(mnis)
x <- mnis_constituency_results(5)
rm(list=ls())
library(mnis)
x <- mnis_constituency_results(5)
mnis_all_members <- function(house = "all", party = NULL, joined_since = NULL, tidy = TRUE) {
if (is.na(pmatch(house, c("all", "lords", "commons"))))
stop("Please select one of 'all', 'lords' or 'commons' for the parameter 'house'")
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/Membership=all"
if (is.null(party) == FALSE)
party <- utils::URLencode(party)
if (house == "lords") {
house <- "|house=lords"
} else if (house == "commons") {
house <- "|house=commons"
} else if (house == "all") {
house <- ""
}
if (is.null(party) == FALSE) {
party <- paste0("|party*", party)
}
if(is.null(joined_since) == FALSE){
joined_since <- paste0("joinedsince=", joined_since)
}
message("Connecting to API")
query <- paste0(baseurl, house, party, joined_since, "/HouseMemberships/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got)
if (tidy == TRUE) {
x <- mnis_tidy(x)
} else {
x
}
}
x <- mnis_all_members()
library(mnis)
x <- mnis_all_members()
View(x)
baseurl <- "http://data.parliament.uk/membersdataplatform/services/mnis/members/query/Membership=all"
party <- NULL
house <- NULL
if (house == "lords") {
house <- "|house=lords"
} else if (house == "commons") {
house <- "|house=commons"
} else if (house == "all") {
house <- ""
}
house <- "all"
if (house == "lords") {
house <- "|house=lords"
} else if (house == "commons") {
house <- "|house=commons"
} else if (house == "all") {
house <- ""
}
if (is.null(party) == FALSE) {
party <- paste0("|party*", party)
}
joined_since <- NULL
if(is.null(joined_since) == FALSE){
joined_since <- paste0("joinedsince=", joined_since)
}
query <- paste0(baseurl, house, party, joined_since, "/HouseMemberships/")
query
got <- httr::GET(query, httr::accept_json())
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got)
View(x)
got$Members
got$Members$Member
names(got$Members$Member)
query
got$Members$Member$HouseMemberships.HouseMembership
names(got$Members$Member$HouseMemberships.HouseMembership)
house = "commons"
if (house == "lords") {
house <- "|house=lords"
} else if (house == "commons") {
house <- "|house=commons"
} else if (house == "all") {
house <- ""
}
query <- paste0(baseurl, house, party, joined_since, "/HouseMemberships/")
query
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
got <- httr::GET(query, httr::accept_json())
got <- jsonlite::fromJSON(httr::content(got$Members$Member, "text"), flatten = TRUE)
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got$Members$Member)
View(x)
got$Members$Member$HouseMemberships.HouseMembership
x <- as.list(got$Members$Member)
x
x <- unlist(x)
x <- t(x)
x <- as.data.frame(x)
View(x)
x <- as.list(got$Members$Member)
x <- as.data.frame(x)
x <- t(x)
x
View(x)
x <- as_data_frame(x)
library(tibble)
x <- as_data_frame(x)
class(x)
x
<<<<<<< HEAD
names(x)
rm(list=ls())
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_win()
library(mnis)
library(mnis)
x <- ref_Committees()
rm(x)
library(mnis)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::submit_cran()
install.packages(c("nlme", "roxygen2"))
library(mnis)
x <- mnix_basic_details
x <- mnis_basic_details()
x <- mnis_basic_details(172)
head(x)
mnis_basic_details(172, tidy=FALSE)
x <- mnis_general_election_results(locationType = 'Country', locationName = 'England',
#'                                  startDate = '2010-01-01', endDate = '2016-01-01')
startDate = '2010-01-01', endDate = '2016-01-01')
x
names(x)
library(mnis)
x <- mnis_general_election_results(locationType = 'Country', locationName = 'England',
startDate = '2010-01-01', endDate = '2016-01-01')
library(mnis)
x <- mnis_general_election_results(locationType = 'Country', locationName = 'England',
startDate = '2010-01-01', endDate = '2016-01-01')
library(mnis)
x <- mnis_general_election_results(locationType = 'Country', locationName = 'England',
startDate = '2010-01-01', endDate = '2016-01-01')
library(mnis)
library(mnis)
x <- mnis_general_election_results(locationType = 'Country', locationName = 'England',
startDate = '2010-01-01', endDate = '2016-01-01')
x
x$LocationInfo <- mnis_tidy(x$LocationInfo)
x
x <- mnis_party_state()
x
x <- mnis_party_state(tidy=FALSE)
x
x <- mnis_tidy(x)
x
roxygen2::roxygenise()
library(mnis)
devtools::use_testthat()
library(testthat)
xbdnu <- mnis_basic_details()
expect_error(xdbnu)
expect_error(xdbnu)
expect_error(xdbnu)
xbdnu <- mnis_basic_details(172)
expect_error(xdbnu)
expect_length(xbdnu, 33)
expect_length(xbdnu, 32)
expect_type(xbdnu, "list")
expect_is(xbdnu, "data.frame")
rm(list=ls())
roxygen2::roxygenise()
library(mnis)
??:::
?`:::`
stats:::coef.default
library(mnis)
=======
View(x)
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.list(got$Members$Member)
class(x$HouseMemberships.HouseMembership)
x$HouseMemberships.HouseMembership
y <- x$HouseMemberships.HouseMembership
y <- as.data.frame(y)
matrix(unlist(y),ncol=5,byrow=TRUE)
matrix(unlist(y),ncol=2264,byrow=TRUE)
x <- as.list(got$Members$Member)
spam = do.call("rbind", lapply(x, "[[", 1))
y <- x$HouseMemberships.HouseMembership
spam = do.call("rbind", lapply(y, "[[", 1))
View(spam)
spam = do.call("rbind", lapply(y, "[[", 5))
spam = do.call("rbind", lapply(y, "[[", 1:5))
do.call(c, unlist(y, recursive=FALSE))
u <- do.call(c, unlist(y, recursive=FALSE))
head(u)
u$House
u$House[2]
u[2]
u
query <- paste0(baseurl, house, party, joined_since, "/HouseMemberships/")
got <- httr::GET(query, httr::accept_json())
if (httr::http_type(got) != "application/json") {
stop("API did not return json", call. = FALSE)
}
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
library(readr)
write_csv(got, "got.csv")
x <- as.data.frame(got)
write_csv(x, "got.csv")
View(x)
x <- write.csv2(x, "x.csv")
class(x$Members.Member.HouseMemberships.HouseMembership)
x$Members.Member.HouseMemberships.HouseMembership <- as.character(x$Members.Member.HouseMemberships.HouseMembership)
x$Members.Member.CurrentStatus.StartDate <- as.character(x$Members.Member.CurrentStatus.StartDate)
x$Members.Member.DateOfBirth <- as.character(x$Members.Member.DateOfBirth)
x$Members.Member.HouseEndDate <- as.character(x$Members.Member.HouseEndDate)
x$Members.Member.DateOfDeath <- as.character(x$Members.Member.DateOfDeath)
write_csv(x, "got.csv")
got <- httr::GET(query, httr::accept_json())
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got)
View(x)
x$Members.Member.HouseMemberships.HouseMembership[1]
h <- unlist(x$Members.Member.HouseMemberships.HouseMembership)
h
n <- flatten(x$Members.Member.HouseMemberships.HouseMembership)
library(tidyr)
??tidyr
n <- as.data.frame(x$Members.Member.HouseMemberships.HouseMembership)
x$Members.Member.HouseMemberships.HouseMembership
x$Members.Member.HouseMemberships.HouseMembership[5]
class(x$Members.Member.HouseMemberships.HouseMembership[5])
hh <- unlist(x$Members.Member.HouseMemberships.HouseMembership, recursive = TRUE)
hh <- unlist(x$Members.Member.HouseMemberships.HouseMembership, recursive = FALSE)
hh$House
hh[5]
got <- httr::GET(query, httr::accept_json())
got <- jsonlite::fromJSON(httr::content(got, "text"), flatten = TRUE)
x <- as.data.frame(got)
rbindlist(x, fill=TRUE)
library(data.table)
rbindlist(x, fill=TRUE)
rbindlist(x$Members.Member.HouseMemberships.HouseMembership, fill=TRUE)
t <- rbindlist(x$Members.Member.HouseMemberships.HouseMembership, fill=TRUE)
x$Members.Member.HouseMemberships.HouseMembership
install.packages("RSocrata")
>>>>>>> b5953afe08d6c0893962551010ba5591fa852706
